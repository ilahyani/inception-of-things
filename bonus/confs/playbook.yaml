- name: setup
  hosts: localhost
  gather_facts: false
  become: true
  tasks:
    - name: Install Dependencies
      ansible.builtin.apt:
        name:
          - wget
          - curl
          - docker.io
        state: present
        update_cache: true
    - name: Check if K3d is Installed
      ansible.builtin.command: which k3d
      register: k3d_check
      ignore_errors: true
    - name: Install k3d
      ansible.builtin.shell:
        cmd: wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      when: k3d_check.rc != 0
    - name: Install kubectl
      ansible.builtin.shell:
        cmd: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
    - name: Check if Cluster Exists
      ansible.builtin.command: k3d cluster list iot
      register: cluster_check
      ignore_errors: true
    - name: Create Cluster and Namespaces
      ansible.builtin.shell:
        cmd: |
          k3d cluster create iot
          kubectl create namespace dev
          kubectl create namespace argocd
          kubectl create namespace gitlab
      when: cluster_check.rc != 0
    - name: Deploy Gitlab
      ansible.builtin.shell:
        cmd: kubectl apply -f ./gitlab.yaml -n gitlab
    - name: Wait For Gitlab Pod To Run
      ansible.builtin.shell:
        cmd: kubectl wait --for=condition=ready pod -l item=gitlab -n gitlab --timeout=300s
      register: gitlab_wait_result
      retries: 3
      delay: 5
      until: gitlab_wait_result.rc == 0
    - name: Wait For Gitlab Container To Be Ready
      ansible.builtin.shell:
        cmd: kubectl exec -n gitlab $(kubectl get pods -n gitlab -o jsonpath='{.items[0].metadata.name}') -- curl -s http://localhost:80
      register: gitlab_ready_result
      retries: 5
      delay: 90
      until: gitlab_ready_result.rc == 0
    - name: Save Gitlab Root Password
      ansible.builtin.shell:
        cmd: |
          kubectl exec -n gitlab $(kubectl get pods -n gitlab -o jsonpath='{.items[0].metadata.name}') -- cat /etc/gitlab/initial_root_password  | grep Password: > gitlab.passwd
      register: get_passwd_result
    - name: Expose Gitlab Externally
      ansible.builtin.shell:
        cmd: nohup kubectl port-forward --address 0.0.0.0 svc/gitlab-service -n gitlab 9090:8081 >> /tmp/gitlab-port-forward.log 2>&1 &
      register: expose_port_result
      retries: 3
      delay: 5
      until: expose_port_result.rc == 0
    - name: Add Gitlab Host to Argocd Source Repo
      ansible.builtin.shell:
        cmd: |
          sed -i 's/GITLAB_HOST/$(curl ifconfig.me)/g' ./argocd.yaml
    - name: Deploy Argocd
      ansible.builtin.shell:
        cmd: |
          kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml -n argocd
          kubectl apply -n argocd -f ./argocd.yaml
    - name: Wait For Argocd Server Pod To Run
      ansible.builtin.shell:
        cmd: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
      register: argo_wait_result
      retries: 3
      delay: 5
      until: argo_wait_result.rc == 0
    - name: Save Argocd Password
      ansible.builtin.shell:
        cmd: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d > argocd.passwd
    - name: Expose Argocd Externally
      ansible.builtin.shell:
        cmd: nohup kubectl port-forward --address 0.0.0.0 svc/argocd-server -n argocd 8080:80 >> /tmp/argocd-port-forward.log 2>&1 &
    - name: Deploy Application
      ansible.builtin.shell:
        cmd: kubectl apply -f ./dev/app.yaml -n dev
    - name: Wait For Application Pod To Run
      ansible.builtin.shell:
        cmd: kubectl wait --for=condition=ready pod -l item=will42 -n dev --timeout=300s
      register: app_wait_result
      retries: 3
      delay: 10
      until: app_wait_result.rc == 0
    # - name: Expose Application Externally
    #   ansible.builtin.shell:
    #     cmd: nohup kubectl port-forward --address 0.0.0.0 svc/will42-service -n dev 8888:8888 >> /tmp/will42-port-forward.log 2>&1 &
